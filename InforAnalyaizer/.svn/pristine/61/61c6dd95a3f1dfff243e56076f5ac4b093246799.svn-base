<%@ page language="java" contentType="text/html; charset=utf-8"
    pageEncoding="utf-8"%>
<%@ taglib prefix="ss" uri="http://www.springframework.org/tags" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>
<fmt:setBundle basename="resources" var="sysInfo" />  <!-- basename: 在classes文件夹下properties文件的文件名 -->
<fmt:message key="E0006" var="E0006" bundle="${sysInfo}" /> 
<fmt:message key="E0024" var="E0024" bundle="${sysInfo}" /> 
<fmt:message key="I0011" var="I0011" bundle="${sysInfo}" />
<!doctype html>
<html>
<head>
<meta charset="UTF-8">
<title></title>
<!-- <link rel="stylesheet" type="text/css" href="${ctx}/css/cy_CIAS_style.css">   --> 
<link rel ="stylesheet" type ="text/css" href ="${ctx}/css/cy_CIAS_style-1920_1080.css" media ="screen and (min-width: 1620px) and (max-width: 1622px)">
<link rel ="stylesheet" type ="text/css" href ="${ctx}/css/cy_CIAS_style-1440_900.css" media ="screen and (min-width: 1133px) and (max-width: 1135px)">
<link rel ="stylesheet" type ="text/css" href ="${ctx}/css/cy_CIAS_style-1366_768.css" media ="screen and (min-width: 1072px) and (max-width: 1074px)">
<link rel ="stylesheet" type ="text/css" href ="${ctx}/css/cy_CIAS_style-1200_800.css" media ="screen and (min-width: 800px) and (max-width: 1070px)"> 
</head>
<body >
<div id="app" v-cloak>
<div class="cy_CMICBMS_bodybg">
		<p>情报规划 > <span>信息源绑定</span></p>
	<div class="cy_CMICBMS_tablebox">
		<div class="cy_CMICBMS_box07">
			<select style="width:150px" v-model="isbinding">
				<option value="" >是否绑定信息源</option>
				<option value="1" >是</option>
				<option value="2" >否</option>
			</select>
			<div class="cy_CMICBMS_schbox01">
				<input type="text" v-model="search_key" placeholder="请输入关键词检索">
			</div>
			<input type="button" class="cy_CMICBMS_schbtn" v-on:click="btn_search()" value="检索">
		</div>
		<div class="cy_CMICBMS_box08">
			<input type="button" class="cy_CMICBMS_edbtn" value="编辑"  v-on:click="EditData()">
		</div>
		<div class="cy_CMICBMS_box08">
<table width="100%" border="0" class="cy_CMICBMS_accmngtb" 	cellspacing="0">
  <tbody>
    <tr>
      <th scope="col" width="25px"><input type="checkbox" v-on:click="changeAllChecked()" name="dch" id="thch" v-model="checked" class="cy_CMICBMS_checkbox"></th>
      <th scope="col" width="40%">分类名称</th>
      <th scope="col" width="10%">绑定信息源</th>
      <th scope="col" width="20%">绑定目标网站数量</th>
      <th scope="col" width="auto">最近编辑时间</th>
      <th scope="col" width="auto">最近编辑者</th>
    </tr>
    <tr class="cy_CMICBMS_treven" v-for="data in datas">
      <td>
         <ic_tree_dv_checkbox v-bind:model="data"></ic_tree_dv_checkbox>
      </td>
      <td>
        <div class="cy_tree_node"> 
            <ic_tree_dv_name v-bind:model="data"></ic_tree_dv_name>
         </div>
      </td>
      <td>
         <ic_tree_dv_binding v-bind:model="data"></ic_tree_dv_binding>       
      </td>
      <td>
         <ic_tree_dv_num v-bind:model="data"></ic_tree_dv_num>
      </td>
      <td nowrap><ic_tree_dv_updatetime v-bind:model="data"></ic_tree_dv_updatetime></td>
      <td><ic_tree_dv_updater v-bind:model="data"></ic_tree_dv_updater></td>
    </tr>
  </tbody>
</table>
		</div>
   <pager  ref="pagecomponent"></pager>  <!-- ref 固定为 pagecomponent  -->
</div>

<!--新增按钮弹窗-->
<div class="cy_hidebg" id="cy_hidebg" style="display:block;" v-show="isshowtcc"></div>
<div id="cy_CMICBMS_infed" style="display:block;" v-show="isshowtcc">
	<div class="cy_CMICBMS_infedtop"><div class="cy_CMICBMS_infedtit">编辑信息源</div><div class="cy_CMICBMS_infedclose" v-on:click="hide()">X</div></div>
	<div class="cy_CMICBMS_infedtb">
		<div class="cy_CMICBMS_infedtbtit">{{ssfl_msg}}</div>
		<div class="cy_CMICBMS_infedtbbd">
			<div class="cy_CMICBMS_infedtbbdL">
				<div class="cy_CMICBMS_infedLbox">可选网站:<input type="text" v-model="search_key_webinfo" class="cy_CMICBMS_infedschbox"><input type="button" v-on:click="btn_web_search()" class="cy_CMICBMS_infedschbtn" value="检索"></div>
				<div class="cy_CMICBMS_infedLbox">
					<table width="100%" border="0" cellspacing="0">
						<tbody>
						<tr>
						  <th style="width: 20px;"><input type="checkbox" id="left_sel" name="l_boxs" v-model="web_checked" v-on:click="left_sel()"></th>
						  <td style="width: auto;font-weight: 700;">网站名称</td>
						</tr>
						<tr v-for="(wdata,index) in webinfo_datas">
						  <th v-bind:style="index==webinfo_datas.length-1?{'border-bottom': '1px #e0e0e0 solid'}:{}">
						     <input type="checkbox" name="l_boxs" onclick="left_box_sel(this)" v-bind:value="wdata.website_ID" v-model="web_checkedNames">
						   </th>
						  <td v-bind:style="index==webinfo_datas.length-1?{'border-bottom': '1px #e0e0e0 solid'}:{}">{{wdata.websiteName}}</td>
						</tr>
					  </tbody>
					</table>
				</div>

			<left_pager v-bind:model="'search_left'" ref="left_pagecomponent"></left_pager>
			</div>
			
			
			<div class="cy_CMICBMS_infedtbbdM">
				<input type="button" id="cy_CMICBMS_bindbtn" v-on:click="joingright()" value=">>">
				<input type="button" id="cy_CMICBMS_releabtn" v-on:click="joingleft()" value="<<">
			</div>
			
			
			
			<div class="cy_CMICBMS_infedtbbdR">
				<div class="cy_CMICBMS_infedRbox">已绑定网站:</div>
				<div class="cy_CMICBMS_infedLbox">
					<table width="100%" border="0" cellspacing="0">
						<tbody>
						<tr>
						  <th style="width: 20px;"><input type="checkbox" name="r_boxs" id="right_sel" v-model="web_al_checked" v-on:click="right_sel()"></th>
						  <td style="width: auto;font-weight: 700;">网站名称</td>
						</tr>
						<tr v-for="(rdata,index) in webinfo_al_datas">
						  <th v-bind:style="index==webinfo_al_datas.length-1?{'border-bottom': '1px #e0e0e0 solid'}:{}">
						     <input type="checkbox" name="r_boxs" onclick="right_box_sel(this)"  v-bind:value="rdata.website_ID" v-model="web_al_checkedNames">
						  </th>
						  <td v-bind:style="index==webinfo_al_datas.length-1?{'border-bottom': '1px #e0e0e0 solid'}:{}">{{rdata.websiteName}}</td>
						</tr>
					  </tbody>
					</table>
				</div>
				<right_pager v-bind:model="'search_right'" ref="right_pagecomponent"></right_pager>
		       </div>
			</div>
		<div class="cy_CMICBMS_infeddn"><input type="button" v-on:click="confim()" value="确定"></div>
		</div>
	</div>
</div>
</div>


<script type="text/javascript" src="${ctx}/js/jquery-3.3.1.min.js"></script>
<script type="text/javascript" src="${ctx}/layer/layer.js"></script>
<script type="text/javascript" src="${ctx}/js/vue.min.js"></script>
<script type="text/javascript" src="${ctx}/js/axios.min.js"></script>
<script type="text/javascript" src="${ctx}/js/polyfill.min.js"></script>
<script type="text/javascript" src="${ctx}/js/ic_components.js"></script>
<script type="text/javascript" src="${ctx}/js/comm.js"></script>
<script>

var Info = {
	E0006:'${E0006}',
	E0024:'${E0024}',
	I0011:'${I0011}'
};


function checka(obj){
	if(!obj.checked){
		checked = false;
		$("#thch").prop("checked",false);
	}else{
		if($("input[name='dch']:checked").length==$("input[name='dch']").length-1){
			checked = true;
			$("#thch").prop("checked",true);
		}
	}
}

function left_box_sel(obj){
	if(!obj.checked){
		web_checked = false;
		$("#left_sel").prop("checked",false);
	}else{
		if($("input[name='l_boxs']:checked").length==$("input[name='l_boxs']").length-1){
			checked = true;
			$("#left_sel").prop("checked",true);
		}
	}
}

function right_box_sel(obj){
	if(!obj.checked){
		web_checked = false;
		$("#right_sel").prop("checked",false);
	}else{
		if($("input[name='r_boxs']:checked").length==$("input[name='r_boxs']").length-1){
			checked = true;
			$("#right_sel").prop("checked",true);
		}
	}
}

function TreeNode(val,depth,children_lg){
	this.val = val;
	this.is_show = true;
	this.is_al_show = true;
	this.is_open = false;
	this.depth = depth;
	this.i_have_ajax = false;
	this.children_lg = children_lg;
	if(children_lg>0){
		this.imgsrc = "${ctx}/image/is-tbarr01.png";
	}else{
		this.imgsrc = "";
	}
	this.children = [];
	
	this.binding = "";
	this.bindingnum = "";
}

var ic_tree_dv_checkbox = {
		template: '<div>'+
		           '<div v-show="model.is_show&&model.is_al_show" v-bind:style="t_style">'+
		           '<input type="checkbox" name="dch"  v-bind:value="model.val.classification_ID"  onclick="checka(this)" v-model="checkedNames" class="cy_CMICBMS_checkbox"><label for="cy_CMICBMS_checkbox"></label></div>'+
		          '<ic_tree_dv_checkbox  v-for="(model,index) in model.children" v-bind:key="index" v-bind:model="model"></ic_tree_dv_checkbox>'+
		          '</div>',
		props: ['model'],
		data:function(){
			return{
				t_style : {padding: '10px 0px !important'} 
			}
		}
};

var ic_tree_dv_name = {
		template: '<div >'+
		           '<div v-show="model.is_show&&model.is_al_show" v-bind:title="model.val.classificationName" class="cy_tree_node_hover" v-bind:style="t_style">'+
		           '<img v-if="model.imgsrc" v-bind:src="model.imgsrc" v-on:click="opClose(model.val.classification_ID)" style="cursor:pointer">'+
		           '{{model.val.classificationName}}</div>'+
		          '<ic_tree_dv_name  v-for="model in model.children"  v-bind:model="model"></ic_tree_dv_name>'+
		          '</div>',
		props: ['model'],
		data:function(){
			return{
				t_style : {padding: '10px 0px !important'} 
			}
		},
		methods:{
			opClose:function(id){
				this.$parent.opClose(id);
			}
		},
		mounted:function(){
			this.t_style = {padding: '10px '+(26+50*this.model.depth)+'px !important'} ;
		}
};

var ic_tree_dv_binding = {
		template: '<div >'+
		           '<div v-show="model.is_show&&model.is_al_show" v-bind:style="t_style">'+
		           '{{model.binding}}&nbsp;</div>'+
		          '<ic_tree_dv_binding  v-for="model in model.children"  v-bind:model="model"></ic_tree_dv_binding>'+
		          '</div>',
		props: ['model'],
		data:function(){
			return {
				t_style : {padding: '10px 0px !important'} 
			}
		},
		mounted:function(){
			this.t_style =  {padding: '10px 0px !important'} ;
		}
};

var ic_tree_dv_num = {
		template: '<div >'+
		           '<div v-show="model.is_show&&model.is_al_show" v-bind:style="t_style">'+
		           '{{model.bindingnum}}&nbsp;</div>'+
		          '<ic_tree_dv_num  v-for="model in model.children" v-bind:model="model"></ic_tree_dv_num>'+
		          '</div>',
		props: ['model'],
		data:function(){
			return {
				t_style : {padding: '10px 0px !important'} 
			}
		},
		mounted:function(){
			this.t_style =  {padding: '10px 0px !important'} ;
		}
};

var ic_tree_dv_updatetime = {
		template: '<div >'+
		           '<div v-show="model.is_show&&model.is_al_show" v-bind:style="t_style">'+
		           '{{model.val.updateDateTime}}&nbsp;</div>'+
		          '<ic_tree_dv_updatetime  v-for="model in model.children"  v-bind:model="model"></ic_tree_dv_updatetime>'+
		          '</div>',
		props: ['model'],
		data:function(){
			return {
				t_style : {padding: '10px 0px !important'} 
			}
		},
		mounted:function(){
			this.t_style =  {padding: '10px 0px !important'} ;
		}
};

var ic_tree_dv_updater = {
		template: '<div >'+
		           '<div v-show="model.is_show&&model.is_al_show" v-bind:style="t_style">'+
		           '{{model.val.updateUser}}&nbsp;</div>'+
		          '<ic_tree_dv_updater  v-for="model in model.children"  v-bind:model="model"></ic_tree_dv_updater>'+
		          '</div>',
		props: ['model'],
		data:function(){
			return {
				t_style : {padding: '10px 0px !important'} 
			}
		},
		mounted:function(){
			this.t_style =  {padding: '10px 0px !important'} ;
		}
};

//Vue.config.devtools = true;

Vue.component('ic_tree_dv_checkbox',ic_tree_dv_checkbox);
Vue.component('ic_tree_dv_name',ic_tree_dv_name);
Vue.component('ic_tree_dv_binding',ic_tree_dv_binding);
Vue.component('ic_tree_dv_num',ic_tree_dv_num);
Vue.component('ic_tree_dv_updatetime',ic_tree_dv_updatetime);
Vue.component('ic_tree_dv_updater',ic_tree_dv_updater);

var checked = false;      //复选框相关
var checkedNames = [];    //复选框相关
var checkedArr = [];    //复选框相关

var web_checked = false;
var web_checkedNames = [];
var web_checkedArr = [];

var web_al_checked = false;
var web_al_checkedNames = [];
var web_al_checkedArr = [];

var app = new Vue({
	
	el:"#app",
	data:{
		search_key:'',
		isbinding:'',
		datas:[],
		isshowtcc:false,    //是否显示弹出层
		ssfl_msg:'',//'所属分类：上下游企业 > > 上游企业 > > 松下2'
		
		webinfo_datas:[],     //所有的网站信息
		webinfo_al_datas:[],  //已绑定网站信息
		search_key_webinfo:''
	},
	components:{
	     'pager':ic_pager,
	     'left_pager':ic_l_pager,
	     'right_pager':ic_l_pager
	  },
	methods:{
		left_sel:function(){
			if(web_checked){
				$("input[name='l_boxs']").prop("checked",false);
				web_checkedNames = [];
			}else{
				$("input[name='l_boxs']").prop("checked",true);
				web_checkedNames = web_checkedArr;
			}
		},
		right_sel:function(){
			if(web_al_checked){
				$("input[name='r_boxs']").prop("checked",false);
				web_al_checkedNames = [];
			}else{
				$("input[name='r_boxs']").prop("checked",true);
				web_al_checkedNames = web_al_checkedArr;
			}
		},
		btn_search:function(){
			  checkedNames = [];
			  this.$refs.pagecomponent.pageBean.pageNow = 1;
			  this.search(this.$refs.pagecomponent.pageBean);
		},
		dealDigui:function(node,flag){
			  if(node.children_lg>0){
				  if(flag){
					  if(node.is_open){
						  for(var i=0;i<node.children.length;i++){
					    	  if(node.children[i].val.parent_Classification_ID==node.val.classification_ID){
					    		  node.children[i].is_show = flag;
					    		  this.dealDigui(node.children[i],flag);
					    	  }  
					      }
					  }
				  }else{
					  for(var i=0;i<node.children.length;i++){
				    	  if(node.children[i].val.parent_Classification_ID==node.val.classification_ID){
				    		  node.children[i].is_show = flag;
				    		  this.dealDigui(node.children[i],flag);
				    	  }  
				      }
				  }
			  }
		  },
	    dealopClose:function(id,search_key,isbinding){
	    	var click_node = this.getClickNode(id,this.datas)[1];
	    	if(!click_node.is_open){                      //打开
		        if(!click_node.i_have_ajax){                         //还未ajax请求
				    var _this = this;
		        	axios.get('../classificationSource/getchild',{
		    			params: {
		    				  Classification_ID:id
		    				}
		    			})
		    			.then(function (response) {
		    				var data = JSON.parse(response.data);
		    				for(var i=0;i<data.length;i++){
		    					 var tn = new TreeNode(data[i],click_node.depth+1,data[i].children_lg);
		    					 if(data[i].children_lg==0){
		    						 if(data[i].binding_lg==0){
		    							 tn.binding = "否";
		    						 }else{
		    							 tn.binding = "是";
		    						 }
		    						 tn.bindingnum = data[i].binding_lg;
		    					 }
		    					
		    					 click_node.children.push(tn);
		    				  }
		    				 click_node.i_have_ajax = true;
		    				 for(var i=0;i<data.length;i++){
		    					  checkedArr.push(data[i].classification_ID);
		    				  }
		    				 if(checked){
		    					 $("input[name='dch']").prop("checked",true);
		    					 checkedNames = checkedArr;
		    				 }

		    				 if(click_node.children.length>0){
		    					
			    			     click_node.is_open = true;
			    				  
			    			     click_node.imgsrc = "${ctx}/image/is-tbarr02.png";
			    			     
			    			     for(var i=0;i<click_node.children.length;i++){
			    			    	 var b = true;
			    			    	 if(click_node.children[i].val.classificationName.indexOf(search_key)<0){
			    			    		 b = false;
			    					 }
			    			    	 if(isbinding=='1'){
			    			    		 if(click_node.children[i].bindingnum==0){
			    			    			 b = false;
			    			    		 }
			    			    	 }
			    			    	 if(isbinding=='2'){
			    			    		 if(click_node.children[i].bindingnum>0){
			    			    			 b = false;
			    			    		 }
			    			    	 }
			    			    	click_node.children[i].is_al_show = b;
			    			    	 
		    						 _this.dealopClose(click_node.children[i].val.classification_ID,search_key,isbinding);
		    					 }
		    				 }
		    				
		    			})
		    			.catch(function (error) {
		    			    console.log(error);
		    			});
		        }
			}
	    	
	    },
		opClose:function(id){
			var click_node = this.getClickNode(id,this.datas)[1];
			if(!click_node.is_open){                      //打开
		        if(!click_node.i_have_ajax){                         //还未ajax请求
				    var _this = this;
		        	axios.get('../classificationSource/getchild',{
		    			params: {
		    				  Classification_ID:id
		    				}
		    			})
		    			.then(function (response) {
		    				var data = JSON.parse(response.data);
		    				for(var i=0;i<data.length;i++){
		    					 var tn = new TreeNode(data[i],click_node.depth+1,data[i].children_lg);
		    					 if(data[i].children_lg==0){
		    						 if(data[i].binding_lg==0){
		    							 tn.binding = "否";
		    						 }else{
		    							 tn.binding = "是";
		    						 }
		    						 tn.bindingnum = data[i].binding_lg;
		    					 }
		    					 click_node.children.push(tn);
		    				  }
		    				click_node.i_have_ajax = true;
		    				 for(var i=0;i<data.length;i++){
		    					  checkedArr.push(data[i].classification_ID);
		    				  }
		    				 if(checked){
		    					 $("input[name='dch']").prop("checked",true);
		    					 checkedNames = checkedArr;
		    				 }
		    				
		    			})
		    			.catch(function (error) {
		    			    console.log(error);
		    			});
		        }
	  
		        click_node.is_open = true;
	  
		        click_node.imgsrc = "${ctx}/image/is-tbarr02.png";
	      
		        this.dealDigui(click_node,true);
			}else{         //关上
				  
				  click_node.is_open = false;
				  
				  click_node.imgsrc = "${ctx}/image/is-tbarr01.png";
				  
				  this.dealDigui(click_node,false);
				  
			  }
		},
		getClickNode:function(id,arr){
			  
			  var node = null;
			  var b = true;
			  for(var i=0;i<arr.length;i++){
				  if(arr[i].val.classification_ID==id){
					  node = [];
					  node[0] = i;
					  node[1] = arr[i];
					  b = false;
					  break;
				  }
			  }
			  if(b){
				  for(var i=0;i<arr.length;i++){
					  if(arr[i].children.length>0){
					     node = this.getClickNode(id,arr[i].children);
					     if(node!=null){
					    	 return node;
					     }
					  }
				  }
			  }
			  return node;
			  
		  },
		hide:function(){
		      this.isshowtcc = false;
		},
		getAllNodeFromANode:function(node,arr){
			if(node.val.parent_Classification_ID!='0000000000'){
				 var parent_node = this.getClickNode(node.val.parent_Classification_ID,this.datas)[1];
				 arr.push(parent_node);
				 this.getAllNodeFromANode(parent_node,arr);
			}
		},
		EditData:function(){
			
			if(checkedNames.length!=1){
				layer.msg(Info.E0006);
			}else{
				
				this.ssfl_msg = '所属分类：';
				
				var clicknode = this.getClickNode(checkedNames[0],this.datas)[1];
				
				if(clicknode.children_lg==0){
					
					this.isshowtcc = true;
					
					var ssflarr = [];
					ssflarr.push(clicknode);
					this.getAllNodeFromANode(clicknode,ssflarr);

					for(var i=ssflarr.length-1;i>=0;i--){
						if(i==ssflarr.length-1){
							this.ssfl_msg += ssflarr[i].val.classificationName;
						}else{
							this.ssfl_msg += " > > "+ssflarr[i].val.classificationName;
						}
					}

					this.search_left(this.$refs.left_pagecomponent.pageBean);
					this.search_right(this.$refs.right_pagecomponent.pageBean);
					
				}else{
					layer.msg(Info.E0024);
				}
			}
		},
		btn_web_search:function(){
			this.$refs.left_pagecomponent.pageBean.pageNow = 1;
			this.search_left(this.$refs.left_pagecomponent.pageBean);
		},
		joingleft:function(){
			if(web_al_checkedNames.length>0){
				 var json = createJSON(web_al_checkedNames);   //createJSON 引自 js/comm.js
				 var l_index = layer.msg(Info.I0011, {
	        		  icon: 16
	        		  ,shade: 0.01
	        		});
			    var _this = this;
			    axios.post('../classificationSource/joingleft',
						 
						 {
		    				Classification_ID:checkedNames[0],
		    				json:json
		    			}
				       ).then(function (response) {
		    				
		    				 layer.close(l_index);
		    				 _this.search_left(_this.$refs.left_pagecomponent.pageBean);
		    				 if(web_al_checkedNames.length==web_al_checkedArr.length){
		    					 if(_this.$refs.right_pagecomponent.pageBean.pageNow!=1){
		    						 _this.$refs.right_pagecomponent.pageBean.pageNow-=1;
		    					 }
		    				 }
		    				 _this.search_right(_this.$refs.right_pagecomponent.pageBean);
		    			})
		    			.catch(function (error) {
		    			    console.log(error);
		    			    layer.close(l_index);
		    			});
			}
		},
		joingright:function(){
		    if(web_checkedNames.length>0){
			    var json = createJSON(web_checkedNames);   //createJSON 引自 js/comm.js
			    var l_index = layer.msg(Info.I0011, {
	        		  icon: 16
	        		  ,shade: 0.01
	        		});
			    var _this = this;
				 axios.post('../classificationSource/joingright',
						 
						 {
		    				Classification_ID:checkedNames[0],
		    				json:json
		    			}
				       ).then(function (response) {
		    				
		    				 layer.close(l_index);
		    				 if(web_checkedNames.length==web_checkedArr.length){
		    					 if(_this.$refs.left_pagecomponent.pageBean.pageNow!=1){
		    						 _this.$refs.left_pagecomponent.pageBean.pageNow-=1;
		    					 }
		    				 }
		    				 _this.search_left(_this.$refs.left_pagecomponent.pageBean);
		    				 _this.search_right(_this.$refs.right_pagecomponent.pageBean);
		    			})
		    			.catch(function (error) {
		    			    console.log(error);
		    			    layer.close(l_index);
		    			});
		    }
		},
		confim:function(){
			var _this = this;
			axios.get('../classificationSource/updatesource',{
    			params: {
    				Classification_ID:checkedNames[0]
    				}
    			})
    			.then(function (response) {
    				 _this.search(_this.$refs.pagecomponent.pageBean);
    				 _this.hide();
    			})
    			.catch(function (error) {
    			    console.log(error);
    			});
		},
		  changeAllChecked:function(){
				if(checked){
					$("input[name='dch']").prop("checked",false);
					checkedNames = [];
				}else{
					$("input[name='dch']").prop("checked",true);
					checkedNames = checkedArr;
				}
		  },
	},
	computed:{
		search_right:function(){
			return function(pageBean){
				var l_index = layer.msg(Info.I0011, {
	        		  icon: 16
	        		  ,shade: 0.01
	        		});
				web_al_checked = false;
				web_al_checkedNames = [];
				var _this = this;
				 axios.get('../classificationSource/searchalweb',{
		    			params: {
		    				Classification_ID:checkedNames[0],
		    				pageNow:pageBean.pageNow,
		    				rowSize:pageBean.rs_selected
		    				}
		    			})
		    			.then(function (response) {

		    				 var data = JSON.parse(response.data);
		    					 
		    				 _this.webinfo_al_datas = data.resdata;
		    			     
		    				web_al_checkedArr = [];
		    				 for(var i=0;i<data.resdata.length;i++){
		    					 web_al_checkedArr.push(data.resdata[i].website_ID);
		    				 }
		    				 
		    				 _this.$refs.right_pagecomponent.dealAfterSearch(data.rowCount); 
		    				 
		    				  layer.close(l_index);
		    				  
		    			})
		    			.catch(function (error) {
		    			    console.log(error);
		    			    layer.close(l_index);
		    			});
			}
		},
		search_left:function(){
			return function(pageBean){
				 var l_index = layer.msg(Info.I0011, {
	        		  icon: 16
	        		  ,shade: 0.01
	        		});
				 web_checked = false;
				 web_checkedNames = [];
				 var _this = this;
				 
				 axios.get('../classificationSource/searchweb',{
		    			params: {
		    				WebsiteName:_this.search_key_webinfo.trim(),
		    				Classification_ID:checkedNames[0],
		    				pageNow:pageBean.pageNow,
		    				rowSize:pageBean.rs_selected
		    				}
		    			})
		    			.then(function (response) {

		    				 var data = JSON.parse(response.data);
		    				
		    				 _this.webinfo_datas = data.resdata;
		    			     
		    				 web_checkedArr = [];
		    				 for(var i=0;i<data.resdata.length;i++){
		    					 web_checkedArr.push(data.resdata[i].website_ID);
		    				 }
		    				 
		    				 _this.$refs.left_pagecomponent.dealAfterSearch(data.rowCount); 
		    				 
		    				  layer.close(l_index);
		    				  
		    			})
		    			.catch(function (error) {
		    			    console.log(error);
		    			    layer.close(l_index);
		    			});
				 
			}
		},
		search:function(){
			 return function(pageBean){
				  var l_index = layer.msg(Info.I0011, {
	        		  icon: 16
	        		  ,shade: 0.01
	        		});
	        	
	        	var _this = this;
	        	axios.get('../classificationSource/search',{
	    			params: {
	    				ClassificationName:_this.search_key.trim(),
	    				isbinding:_this.isbinding,
	    				Parent_Classification_ID:_this.farther_node_id,
	    				pageNow:pageBean.pageNow,
	    				rowSize:pageBean.rs_selected
	    				}
	    			})
	    			.then(function (response) {
	    				
	    				 checkedNames = [];
	    				 var data = JSON.parse(response.data);
	    				 //console.log(data);
	    				 _this.datas = [];
	    				 
	    				 var temp = data.resdata;
	    				 for(var i=0;i<temp.length;i++){
	    					 var tn = new TreeNode(temp[i],0,temp[i].children_lg);  
	    					 if(temp[i].children_lg==0){
	    						 if(temp[i].binding_lg==0){
	    							 tn.binding = "否";
	    						 }else{
	    							 tn.binding = "是";
	    						 }
	    						 tn.bindingnum = temp[i].binding_lg;
	    					 }
	    					 checked = false;
	    					 _this.datas.push(tn);
	    				 }
	    				
	    				 checkedArr = [];
	    				  for(var i=0;i<data.resdata.length;i++){
	    					  checkedArr.push(data.resdata[i].classification_ID);
	    				  }
	    			
	    				 _this.$refs.pagecomponent.dealAfterSearch(data.rowCount); 
	    				
	    				 if(_this.search_key.trim()!=''){    //如果查询词不为空，则递归打开所有节点
	    					 for(var i=0;i<_this.datas.length;i++){
	    						 _this.dealopClose(_this.datas[i].val.classification_ID,_this.search_key.trim(),_this.isbinding);
	    					 }
	    				 }
	    				 
	    				  layer.close(l_index);
	    				  
	    			})
	    			.catch(function (error) {
	    			    console.log(error);
	    			    layer.close(l_index);
	    			});
			 }
		}
	},
  watch: {
		checkedNames: function() {
			if (checkedNames.length != checkedArr.length||checkedNames.length==0) {
				checked = false;
			} else {
				checked = true;
			}
		}
	 },
	mounted:function(){
		 this.search(this.$refs.pagecomponent.pageBean);
		
	}
	
	
});

</script>

</body>

</html>
